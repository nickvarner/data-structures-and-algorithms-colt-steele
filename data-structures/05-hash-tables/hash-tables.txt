What is a hash table?

Hash tables are used to store key-value pairs.

They are like arrays, but the keys are not ordered.

Unlike arrays, hash tables are FAST for all of the following operations:
- finding values
- adding new values
- removing values

Hash Tables in the Wild
LANG          HASH Tables
Python        Dictionaries
JavaScript    Objects and Maps*
Java          Maps        
Go            Maps
Scala         Maps
Ruby          Hashes

*Objects have some restrictions, but are basically hash tables.

hash tables give us human-readability and computer readability

were going to reinvent the hashtable using an array.. for some reason

in order to look up values by key, we need a way to convert keys in valid array indices.

a function that performs this task is called a hash function

What makes a good hash function?

1. Fast (ie constant time)
2. Doesn't cluster outputs at specific indices, but distributes uniformly
3. Deterministic (same input yields the same output)

Terrible Example(s)
function slowHash(key) {
  for(let i = 0; i < 10000; i++) {
    console.log('every day im hasing')
  }
  return key[0].charCodeAt(0);
}

function sameHashedValue(key) {
  return 0;
}

function randomHash(key) {
  return Math.floor(Math.random() * 1000)
}

!!** PRIME NUMBERS **!!

The prime number in the hash is helpful in spreading out they keys more uniformly.
It's also helpful if the array that you're putting values into has a prime length.

You don't need to know why. (Math is complicated!)
But here are some links if you're curious
- 
- 

Dealing With Collisions

Even with a large array and a great has funtion, collisions are inevitable.

There are many strategies for dealing with collisions, but we'll focus on two.
1) Separate Chaining - creating a nested array
2) Linear Probing = search through the array to find the next empty slot

BIG O OF HASH Tables
Insertion    O(1)
Deletion     O(1)
Access       O(1)