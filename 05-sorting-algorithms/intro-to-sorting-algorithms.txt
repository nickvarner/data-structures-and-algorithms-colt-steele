Sorting is the process of rearranging the items in a collection so that the items are in some kind of order.

- Sorting number from smallest to largest
- Sorting names alphabetically
- Sorting movies based on release year
- Sorting movies based on revenue

function sort(arr) {
    return sortedArr
}

Why do we need to learn this?
- Sorting is an incredibly common task, so it's good to know how it works
- There are many different ways to sort things, and different techniques have their own advantages and disadvantages.
- It's also a classic interview question.

JavaScript does have a sort function, it sorts strings alphabetically.. makes sense.
arr.sort()
Numbers are a different story. They're not in ascending or descending order. They're sorted using their unicode value which is extremely uncommon.

- It does accept an optional comparator function
- You can use this comparator function to tell JavaScript how you want it to sort
- The comparator looks at pairs of elements (a and b), determines their sort order based on the return value.
    - If it returns a negative number, a should come before b.
    - If it returns a positve number, a should come after b.
    - If it returns 0, a and b are the same as far as the sort is concerned.

Example:
funtion numberCompare(num1, num2) {
    return num1 - num2
}

[ 6, 4, 15, 10].sort(numberCompare);
returns [4, 6, 10, 15]

If you swap in the numberCompare the parameters then it could back in descending order.

function compareByLength(str1, str2) {
    return str1.length - str2.length;
}

["Steele", "Colt", "Data Structures", "Algorithms"].sort(compareByLength)
returns ["Data Structures", "Algorithms", "Steele", "Colt"]

What about time complexity?
n^2
nested loops are almost always n^2